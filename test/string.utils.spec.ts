import { assert } from "chai";
import { isDomainValid, isEmailValid, isEmpty, isNotEmpty, isWebUrlValid, length, reverse } from "../src/string.utils"

describe("StringUtils.isNotEmpty Test", () => {
  it("should return true for any string that not only contains spaces", () => {
    assert.equal(isNotEmpty("string"), true)
    assert.equal(isNotEmpty("1"), true)
    assert.equal(isNotEmpty("0"), true)
    assert.equal(isNotEmpty("0 "), true)
    assert.equal(isNotEmpty(" 0"), true)
    assert.equal(isNotEmpty("false"), true)
    assert.equal(isNotEmpty("null"), true)
    assert.equal(isNotEmpty(" -   "), true)
  })
  it("should return false for any string that only contains spaces", () => {
    assert.equal(isNotEmpty(""), false)
    assert.equal(isNotEmpty(" "), false)
    assert.equal(isNotEmpty("   "), false)
  })
  it("should return false for any non string value", () => {
    assert.equal(isNotEmpty(0), false)
    assert.equal(isNotEmpty(1), false)
    assert.equal(isNotEmpty(null), false)
    assert.equal(isNotEmpty(undefined), false)
    assert.equal(isNotEmpty(false), false)
    assert.equal(isNotEmpty(true), false)
    assert.equal(isNotEmpty([]), false)
    assert.equal(isNotEmpty([""]), false)
    assert.equal(isNotEmpty(new Date()), false)
    assert.equal(isNotEmpty({}), false)
  })
})

describe("StringUtils.isEmpty Test", () => {
  it("should return false for any string that not only contains spaces", () => {
    assert.equal(isEmpty("string"), false)
    assert.equal(isEmpty("1"), false)
    assert.equal(isEmpty("0"), false)
    assert.equal(isEmpty("0 "), false)
    assert.equal(isEmpty(" 0"), false)
    assert.equal(isEmpty("false"), false)
    assert.equal(isEmpty("null"), false)
    assert.equal(isEmpty(" -   "), false)
  })
  it("should return true for null, undefined or for any string that only contains spaces", () => {
    assert.equal(isEmpty(null), true)
    assert.equal(isEmpty(undefined), true)
    assert.equal(isEmpty(""), true)
    assert.equal(isEmpty(" "), true)
    assert.equal(isEmpty("   "), true)
  })
  it("should return false for any non string value", () => {
    assert.equal(isEmpty(0), false)
    assert.equal(isEmpty(1), false)
    assert.equal(isEmpty(false), false)
    assert.equal(isEmpty(true), false)
    assert.equal(isEmpty([]), false)
    assert.equal(isEmpty([""]), false)
    assert.equal(isEmpty(new Date()), false)
    assert.equal(isEmpty({}), false)
  })
})

describe("StringUtils.length Test", () => {
  it("should return the length for any string", () => {
    assert.equal(length("string"), 6)
    assert.equal(length("1"), 1)
    assert.equal(length("0"), 1)
    assert.equal(length("0 "), 2)
    assert.equal(length(" 0"), 2)
    assert.equal(length("false"), 5)
    assert.equal(length("null"), 4)
    assert.equal(length(" -   "), 5)
    assert.equal(length(""), 0)
    assert.equal(length(" "), 1)
    assert.equal(length("   "), 3)
  })
  it("should return 0 for any non string value", () => {
    assert.equal(length(0), 0)
    assert.equal(length(1), 0)
    assert.equal(length(null), 0)
    assert.equal(length(undefined), 0)
    assert.equal(length(false), 0)
    assert.equal(length(true), 0)
    assert.equal(length([]), 0)
    assert.equal(length([""]), 0)
    assert.equal(length(new Date()), 0)
    assert.equal(length({}), 0)
  })
})

describe("StringUtils.reverse Test", () => {
  it("should return the input string with reversed characters", () => {
    assert.equal(reverse("string"), "gnirts")
    assert.equal(reverse("1"), "1")
    assert.equal(reverse("0"), "0")
    assert.equal(reverse(" 0"), "0 ")
    assert.equal(reverse("false"), "eslaf")
    assert.equal(reverse("null"), "llun")
    assert.equal(reverse(" -   "), "   - ")
  })
  it("should return null for any non string value", () => {
    assert.equal(reverse(""), null)
    assert.equal(reverse(" "), null)
    assert.equal(reverse("   "), null)
    assert.equal(reverse(0 as any), null)
    assert.equal(reverse(1 as any), null)
    assert.equal(reverse(null as any), null)
    assert.equal(reverse(undefined as any), null)
    assert.equal(reverse(false as any), null)
    assert.equal(reverse(true as any), null)
    assert.equal(reverse([] as any), null)
    assert.equal(reverse([""] as any), null)
    assert.equal(reverse(new Date() as any), null)
    assert.equal(reverse({} as any), null)
  })
})

describe("StringUtils.isEmailValid Test", () => {
  it("should return true for valid string emails", () => {
    assert.equal(isEmailValid("mail@test.com"), true)
    assert.equal(isEmailValid("mail@test.co"), true)
    assert.equal(isEmailValid("name.mail@test.co"), true)
    assert.equal(isEmailValid("name.mail@test.com.mx"), true)
    assert.equal(isEmailValid("name-mail@test.com"), true)
  })
  it("should return false for invalid string emails", () => {
    assert.equal(isEmailValid("mail@test.c"), false)
    assert.equal(isEmailValid("mail@test.com.m"), false)
    assert.equal(isEmailValid(""), false)
    assert.equal(isEmailValid(" "), false)
    assert.equal(isEmailValid("   "), false)
  })
  it("should return false for any non string value", () => {
    assert.equal(isEmailValid(0 as any), false)
    assert.equal(isEmailValid(1 as any), false)
    assert.equal(isEmailValid(null as any), false)
    assert.equal(isEmailValid(undefined as any), false)
    assert.equal(isEmailValid(false as any), false)
    assert.equal(isEmailValid(true as any), false)
    assert.equal(isEmailValid([] as any), false)
    assert.equal(isEmailValid([""] as any), false)
    assert.equal(isEmailValid(new Date() as any), false)
    assert.equal(isEmailValid({} as any), false)
  })
})

describe("StringUtils.isDomainValid Test", () => {
  it("should return true for valid string domains", () => {
    assert.equal(isDomainValid("test.com"), true)
    assert.equal(isDomainValid("test.co"), true)
    assert.equal(isDomainValid("test.com.mx"), true)
    assert.equal(isDomainValid("super-test.com"), true)
    assert.equal(isDomainValid("something.super-test.com"), true)
    assert.equal(isDomainValid("a.net"), true)
    assert.equal(isDomainValid("0-0o.com"), true)
    assert.equal(isDomainValid("0-wh-ao14-0.com-com.net"), true)
  })
  it("should return false for invalid string domains", () => {
    assert.equal(isDomainValid("mail@test.com"), false)
    assert.equal(isDomainValid("mail@test.com.m"), false)
    assert.equal(isDomainValid("-a.dot"), false)
    assert.equal(isDomainValid("com.g"), false)
    assert.equal(isDomainValid("mkyong.com/users"), false)
    assert.equal(isDomainValid("sub.mkyong-.com"), false)
    assert.equal(isDomainValid("sub.-mkyong.com"), false)
    assert.equal(isDomainValid(""), false)
    assert.equal(isDomainValid(" "), false)
    assert.equal(isDomainValid("   "), false)
  })
  it("should return false for any non string value", () => {
    assert.equal(isDomainValid(0 as any), false)
    assert.equal(isDomainValid(1 as any), false)
    assert.equal(isDomainValid(null as any), false)
    assert.equal(isDomainValid(undefined as any), false)
    assert.equal(isDomainValid(false as any), false)
    assert.equal(isDomainValid(true as any), false)
    assert.equal(isDomainValid([] as any), false)
    assert.equal(isDomainValid([""] as any), false)
    assert.equal(isDomainValid(new Date() as any), false)
    assert.equal(isDomainValid({} as any), false)
  })
})

describe("StringUtils.isUrlValid Test", () => {
  it("should return true for valid string URL", () => {
    assert.equal(isWebUrlValid("http://test.com"), true)
    assert.equal(isWebUrlValid("https://localhost:3000"), true)
    assert.equal(isWebUrlValid("http://localhost?param=123"), true)
    assert.equal(isWebUrlValid("http://123.123.123.123:3000"), true)
  })
  it("should return false for invalid string URL", () => {
    assert.equal(isWebUrlValid("mail@test.com"), false)
    assert.equal(isWebUrlValid("mail@test.com.m"), false)
    assert.equal(isWebUrlValid("ftp://mail@test.com.m"), false)
    assert.equal(isWebUrlValid("ftps://-a.dot"), false)
    assert.equal(isWebUrlValid("fttp://com.g"), false)
    assert.equal(isWebUrlValid("mkyong.com/users"), false)
    //assert.equal(isWebUrlValid("http://sub.mkyong-.com"), false)
    //assert.equal(isWebUrlValid("https://sub.-mkyong.com"), false)
    assert.equal(isWebUrlValid(""), false)
    assert.equal(isWebUrlValid(" "), false)
    assert.equal(isWebUrlValid("   "), false)
  })
  it("should return false for any non string value", () => {
    assert.equal(isDomainValid(0 as any), false)
    assert.equal(isDomainValid(1 as any), false)
    assert.equal(isDomainValid(null as any), false)
    assert.equal(isDomainValid(undefined as any), false)
    assert.equal(isDomainValid(false as any), false)
    assert.equal(isDomainValid(true as any), false)
    assert.equal(isDomainValid([] as any), false)
    assert.equal(isDomainValid([""] as any), false)
    assert.equal(isDomainValid(new Date() as any), false)
    assert.equal(isDomainValid({} as any), false)
  })
})